// Code generated by protoc-gen-go.
// source: tensorflow/core/protobuf/config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	tensorflow/core/protobuf/config.proto
	tensorflow/core/framework/allocation_description.proto
	tensorflow/core/framework/attr_value.proto
	tensorflow/core/framework/cost_graph.proto
	tensorflow/core/framework/device_attributes.proto
	tensorflow/core/framework/function.proto
	tensorflow/core/framework/graph.proto
	tensorflow/core/framework/kernel_def.proto
	tensorflow/core/framework/log_memory.proto
	tensorflow/core/framework/op_def.proto
	tensorflow/core/framework/step_stats.proto
	tensorflow/core/framework/summary.proto
	tensorflow/core/framework/tensor.proto
	tensorflow/core/framework/tensor_description.proto
	tensorflow/core/framework/tensor_shape.proto
	tensorflow/core/framework/tensor_slice.proto
	tensorflow/core/framework/types.proto
	tensorflow/core/framework/variable.proto
	tensorflow/core/framework/versions.proto

It has these top-level messages:
	GPUOptions
	OptimizerOptions
	GraphOptions
	ThreadPoolOptionProto
	ConfigProto
	DebugTensorWatch
	RunOptions
	RunMetadata
	AllocationDescription
	AttrValue
	NameAttrList
	CostGraphDef
	DeviceAttributes
	FunctionDefLibrary
	FunctionDef
	GradientDef
	GraphDef
	NodeDef
	KernelDef
	MemoryLogStep
	MemoryLogTensorAllocation
	MemoryLogTensorDeallocation
	MemoryLogTensorOutput
	MemoryLogRawAllocation
	MemoryLogRawDeallocation
	OpDef
	OpDeprecation
	OpList
	AllocatorMemoryUsed
	NodeOutput
	NodeExecStats
	DeviceStepStats
	StepStats
	HistogramProto
	Summary
	TensorProto
	TensorDescription
	TensorShapeProto
	TensorSliceProto
	VariableDef
	SaveSliceInfoDef
	VersionDef
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Optimization level
type OptimizerOptions_Level int32

const (
	// L1 is the default level.
	// Optimization performed at L1 :
	// 1. Common subexpression elimination
	// 2. Constant folding
	OptimizerOptions_L1 OptimizerOptions_Level = 0
	// No optimizations
	OptimizerOptions_L0 OptimizerOptions_Level = -1
)

var OptimizerOptions_Level_name = map[int32]string{
	0:  "L1",
	-1: "L0",
}
var OptimizerOptions_Level_value = map[string]int32{
	"L1": 0,
	"L0": -1,
}

func (x OptimizerOptions_Level) String() string {
	return proto.EnumName(OptimizerOptions_Level_name, int32(x))
}
func (OptimizerOptions_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// TODO(pbar) Turn this into a TraceOptions proto which allows
// tracing to be controlled in a more orthogonal manner?
type RunOptions_TraceLevel int32

const (
	RunOptions_NO_TRACE       RunOptions_TraceLevel = 0
	RunOptions_SOFTWARE_TRACE RunOptions_TraceLevel = 1
	RunOptions_HARDWARE_TRACE RunOptions_TraceLevel = 2
	RunOptions_FULL_TRACE     RunOptions_TraceLevel = 3
)

var RunOptions_TraceLevel_name = map[int32]string{
	0: "NO_TRACE",
	1: "SOFTWARE_TRACE",
	2: "HARDWARE_TRACE",
	3: "FULL_TRACE",
}
var RunOptions_TraceLevel_value = map[string]int32{
	"NO_TRACE":       0,
	"SOFTWARE_TRACE": 1,
	"HARDWARE_TRACE": 2,
	"FULL_TRACE":     3,
}

func (x RunOptions_TraceLevel) String() string {
	return proto.EnumName(RunOptions_TraceLevel_name, int32(x))
}
func (RunOptions_TraceLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type GPUOptions struct {
	// A value between 0 and 1 that indicates what fraction of the
	// available GPU memory to pre-allocate for each process.  1 means
	// to pre-allocate all of the GPU memory, 0.5 means the process
	// allocates ~50% of the available GPU memory.
	PerProcessGpuMemoryFraction float64 `protobuf:"fixed64,1,opt,name=per_process_gpu_memory_fraction,json=perProcessGpuMemoryFraction" json:"per_process_gpu_memory_fraction,omitempty"`
	// The type of GPU allocation strategy to use.
	//
	// Allowed values:
	// "": The empty string (default) uses a system-chosen default
	//     which may change over time.
	//
	// "BFC": A "Best-fit with coalescing" algorithm, simplified from a
	//        version of dlmalloc.
	AllocatorType string `protobuf:"bytes,2,opt,name=allocator_type,json=allocatorType" json:"allocator_type,omitempty"`
	// Delay deletion of up to this many bytes to reduce the number of
	// interactions with gpu driver code.  If 0, the system chooses
	// a reasonable default (several MBs).
	DeferredDeletionBytes int64 `protobuf:"varint,3,opt,name=deferred_deletion_bytes,json=deferredDeletionBytes" json:"deferred_deletion_bytes,omitempty"`
	// If true, the allocator does not pre-allocate the entire specified
	// GPU memory region, instead starting small and growing as needed.
	AllowGrowth bool `protobuf:"varint,4,opt,name=allow_growth,json=allowGrowth" json:"allow_growth,omitempty"`
}

func (m *GPUOptions) Reset()                    { *m = GPUOptions{} }
func (m *GPUOptions) String() string            { return proto.CompactTextString(m) }
func (*GPUOptions) ProtoMessage()               {}
func (*GPUOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Options passed to the graph optimizer
type OptimizerOptions struct {
	// If true, optimize the graph using common subexpression elimination.
	DoCommonSubexpressionElimination bool `protobuf:"varint,1,opt,name=do_common_subexpression_elimination,json=doCommonSubexpressionElimination" json:"do_common_subexpression_elimination,omitempty"`
	// If true, perform constant folding optimization on the graph.
	DoConstantFolding bool `protobuf:"varint,2,opt,name=do_constant_folding,json=doConstantFolding" json:"do_constant_folding,omitempty"`
	// If true, perform function inlining on the graph.
	DoFunctionInlining bool                   `protobuf:"varint,4,opt,name=do_function_inlining,json=doFunctionInlining" json:"do_function_inlining,omitempty"`
	OptLevel           OptimizerOptions_Level `protobuf:"varint,3,opt,name=opt_level,json=optLevel,enum=tensorflow.OptimizerOptions_Level" json:"opt_level,omitempty"`
}

func (m *OptimizerOptions) Reset()                    { *m = OptimizerOptions{} }
func (m *OptimizerOptions) String() string            { return proto.CompactTextString(m) }
func (*OptimizerOptions) ProtoMessage()               {}
func (*OptimizerOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GraphOptions struct {
	// If true, use control flow to schedule the activation of Recv nodes.
	// (Currently ignored.)
	EnableRecvScheduling bool `protobuf:"varint,2,opt,name=enable_recv_scheduling,json=enableRecvScheduling" json:"enable_recv_scheduling,omitempty"`
	// Options controlling how graph is optimized.
	OptimizerOptions *OptimizerOptions `protobuf:"bytes,3,opt,name=optimizer_options,json=optimizerOptions" json:"optimizer_options,omitempty"`
	// The number of steps to run before returning a cost model detailing
	// the memory usage and performance of each node of the graph. 0 means
	// no cost model.
	BuildCostModel int64 `protobuf:"varint,4,opt,name=build_cost_model,json=buildCostModel" json:"build_cost_model,omitempty"`
	// Annotate each Node with Op output shape data, to the extent it can
	// be statically inferred.
	InferShapes bool `protobuf:"varint,5,opt,name=infer_shapes,json=inferShapes" json:"infer_shapes,omitempty"`
	// Only place the subgraphs that are run, rather than the entire graph.
	//
	// This is useful for interactive graph building, where one might
	// produce graphs that cannot be placed during the debugging
	// process.  In particular, it allows the client to continue work in
	// a session after adding a node to a graph whose placement
	// constraints are unsatisfiable.
	PlacePrunedGraph bool `protobuf:"varint,6,opt,name=place_pruned_graph,json=placePrunedGraph" json:"place_pruned_graph,omitempty"`
}

func (m *GraphOptions) Reset()                    { *m = GraphOptions{} }
func (m *GraphOptions) String() string            { return proto.CompactTextString(m) }
func (*GraphOptions) ProtoMessage()               {}
func (*GraphOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GraphOptions) GetOptimizerOptions() *OptimizerOptions {
	if m != nil {
		return m.OptimizerOptions
	}
	return nil
}

type ThreadPoolOptionProto struct {
	// The number of threads in the pool.
	//
	// 0 means the system picks a value based on where this option proto is used
	// (see the declaration of the specific field for more info).
	NumThreads int32 `protobuf:"varint,1,opt,name=num_threads,json=numThreads" json:"num_threads,omitempty"`
}

func (m *ThreadPoolOptionProto) Reset()                    { *m = ThreadPoolOptionProto{} }
func (m *ThreadPoolOptionProto) String() string            { return proto.CompactTextString(m) }
func (*ThreadPoolOptionProto) ProtoMessage()               {}
func (*ThreadPoolOptionProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Session configuration parameters.
// The system picks an appropriate values for fields that are not set.
type ConfigProto struct {
	// Map from device type name (e.g., "CPU" or "GPU" ) to maximum
	// number of devices of that type to use.  If a particular device
	// type is not found in the map, the system picks an appropriate
	// number.
	DeviceCount map[string]int32 `protobuf:"bytes,1,rep,name=device_count,json=deviceCount" json:"device_count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// The execution of an individual op (for some op types) can be
	// parallelized on a pool of intra_op_parallelism_threads.
	// 0 means the system picks an appropriate number.
	IntraOpParallelismThreads int32 `protobuf:"varint,2,opt,name=intra_op_parallelism_threads,json=intraOpParallelismThreads" json:"intra_op_parallelism_threads,omitempty"`
	// Nodes that perform blocking operations are enqueued on a pool of
	// inter_op_parallelism_threads available in each process.
	//
	// 0 means the system picks an appropriate number.
	//
	// Note that the first Session created in the process sets the
	// number of threads for all future sessions unless use_per_session_threads is
	// true or session_inter_op_thread_pool is configured.
	InterOpParallelismThreads int32 `protobuf:"varint,5,opt,name=inter_op_parallelism_threads,json=interOpParallelismThreads" json:"inter_op_parallelism_threads,omitempty"`
	// If true, use a new set of threads for this session rather than the global
	// pool of threads. Only supported by direct sessions.
	//
	// If false, use the global threads created by the first session, or the
	// per-session thread pools configured by session_inter_op_thread_pool.
	//
	// This option is deprecated. The same effect can be achieved by setting
	// session_inter_op_thread_pool to have one element, whose num_threads equals
	// inter_op_parallelism_threads.
	UsePerSessionThreads bool `protobuf:"varint,9,opt,name=use_per_session_threads,json=usePerSessionThreads" json:"use_per_session_threads,omitempty"`
	// This option is experimental - it may be replaced with a different mechanism
	// in the future. The intended use is for when some session invocations need
	// to run in a background pool limited to a small number of threads.
	//
	// Configures session thread pools. If this is configured, then RunOptions for
	// a Run call can select the thread pool to use.
	//
	// If a pool's num_threads is 0, then inter_op_parallelism_threads is used.
	SessionInterOpThreadPool []*ThreadPoolOptionProto `protobuf:"bytes,12,rep,name=session_inter_op_thread_pool,json=sessionInterOpThreadPool" json:"session_inter_op_thread_pool,omitempty"`
	// Assignment of Nodes to Devices is recomputed every placement_period
	// steps until the system warms up (at which point the recomputation
	// typically slows down automatically).
	PlacementPeriod int32 `protobuf:"varint,3,opt,name=placement_period,json=placementPeriod" json:"placement_period,omitempty"`
	// When any filters are present sessions will ignore all devices which do not
	// match the filters. Each filter can be partially specified, e.g. "/job:ps"
	// "/job:worker/replica:3", etc.
	DeviceFilters []string `protobuf:"bytes,4,rep,name=device_filters,json=deviceFilters" json:"device_filters,omitempty"`
	// Options that apply to all GPUs.
	GpuOptions *GPUOptions `protobuf:"bytes,6,opt,name=gpu_options,json=gpuOptions" json:"gpu_options,omitempty"`
	// Whether soft placement is allowed. If allow_soft_placement is true,
	// an op will be placed on CPU if
	//   1. there's no GPU implementation for the OP
	// or
	//   2. no GPU devices are known or registered
	// or
	//   3. need to co-locate with reftype input(s) which are from CPU.
	AllowSoftPlacement bool `protobuf:"varint,7,opt,name=allow_soft_placement,json=allowSoftPlacement" json:"allow_soft_placement,omitempty"`
	// Whether device placements should be logged.
	LogDevicePlacement bool `protobuf:"varint,8,opt,name=log_device_placement,json=logDevicePlacement" json:"log_device_placement,omitempty"`
	// Options that apply to all graphs.
	GraphOptions *GraphOptions `protobuf:"bytes,10,opt,name=graph_options,json=graphOptions" json:"graph_options,omitempty"`
	// Global timeout for all blocking operations in this session.  If non-zero,
	// and not overridden on a per-operation basis, this value will be used as the
	// deadline for all blocking operations.
	OperationTimeoutInMs int64 `protobuf:"varint,11,opt,name=operation_timeout_in_ms,json=operationTimeoutInMs" json:"operation_timeout_in_ms,omitempty"`
}

func (m *ConfigProto) Reset()                    { *m = ConfigProto{} }
func (m *ConfigProto) String() string            { return proto.CompactTextString(m) }
func (*ConfigProto) ProtoMessage()               {}
func (*ConfigProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigProto) GetDeviceCount() map[string]int32 {
	if m != nil {
		return m.DeviceCount
	}
	return nil
}

func (m *ConfigProto) GetSessionInterOpThreadPool() []*ThreadPoolOptionProto {
	if m != nil {
		return m.SessionInterOpThreadPool
	}
	return nil
}

func (m *ConfigProto) GetGpuOptions() *GPUOptions {
	if m != nil {
		return m.GpuOptions
	}
	return nil
}

func (m *ConfigProto) GetGraphOptions() *GraphOptions {
	if m != nil {
		return m.GraphOptions
	}
	return nil
}

// EXPERIMENTAL. Option for watching a node.
type DebugTensorWatch struct {
	// Name of the node to watch.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	// Output slot to watch.
	// The semantics of output_slot == -1 is that the node is only watched for
	// completion, but not for any output tensors. See NodeCompletionCallback
	// in debug_gateway.h.
	// TODO(cais): Implement this semantics.
	OutputSlot int32 `protobuf:"varint,2,opt,name=output_slot,json=outputSlot" json:"output_slot,omitempty"`
	// Name(s) of the debugging op(s).
	// One or more than one probes on a tensor.
	// e.g., {"DebugIdentity", "DebugNanCount"}
	DebugOps []string `protobuf:"bytes,3,rep,name=debug_ops,json=debugOps" json:"debug_ops,omitempty"`
	// URL(s) for debug targets(s).
	//   E.g., "file:///foo/tfdbg_dump", "grpc://localhost:11011"
	// Each debug op listed in debug_ops will publish its output tensor (debug
	// signal) to all URLs in debug_urls.
	DebugUrls []string `protobuf:"bytes,4,rep,name=debug_urls,json=debugUrls" json:"debug_urls,omitempty"`
}

func (m *DebugTensorWatch) Reset()                    { *m = DebugTensorWatch{} }
func (m *DebugTensorWatch) String() string            { return proto.CompactTextString(m) }
func (*DebugTensorWatch) ProtoMessage()               {}
func (*DebugTensorWatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// EXPERIMENTAL. Options for a single Run() call.
type RunOptions struct {
	TraceLevel RunOptions_TraceLevel `protobuf:"varint,1,opt,name=trace_level,json=traceLevel,enum=tensorflow.RunOptions_TraceLevel" json:"trace_level,omitempty"`
	// Time to wait for operation to complete in milliseconds.
	TimeoutInMs int64 `protobuf:"varint,2,opt,name=timeout_in_ms,json=timeoutInMs" json:"timeout_in_ms,omitempty"`
	// The thread pool to use, if session_inter_op_thread_pool is configured.
	InterOpThreadPool int32 `protobuf:"varint,3,opt,name=inter_op_thread_pool,json=interOpThreadPool" json:"inter_op_thread_pool,omitempty"`
	// Debugging options
	DebugTensorWatchOpts []*DebugTensorWatch `protobuf:"bytes,4,rep,name=debug_tensor_watch_opts,json=debugTensorWatchOpts" json:"debug_tensor_watch_opts,omitempty"`
}

func (m *RunOptions) Reset()                    { *m = RunOptions{} }
func (m *RunOptions) String() string            { return proto.CompactTextString(m) }
func (*RunOptions) ProtoMessage()               {}
func (*RunOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RunOptions) GetDebugTensorWatchOpts() []*DebugTensorWatch {
	if m != nil {
		return m.DebugTensorWatchOpts
	}
	return nil
}

// EXPERIMENTAL. Metadata output (i.e., non-Tensor) for a single Run() call.
type RunMetadata struct {
	// Statistics traced for this step. Populated if tracing is turned on via the
	// "RunOptions" proto.
	// EXPERIMENTAL: The format and set of events may change in future versions.
	StepStats *StepStats `protobuf:"bytes,1,opt,name=step_stats,json=stepStats" json:"step_stats,omitempty"`
	// The cost graph for the computation defined by the run call.
	CostGraph *CostGraphDef `protobuf:"bytes,2,opt,name=cost_graph,json=costGraph" json:"cost_graph,omitempty"`
}

func (m *RunMetadata) Reset()                    { *m = RunMetadata{} }
func (m *RunMetadata) String() string            { return proto.CompactTextString(m) }
func (*RunMetadata) ProtoMessage()               {}
func (*RunMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RunMetadata) GetStepStats() *StepStats {
	if m != nil {
		return m.StepStats
	}
	return nil
}

func (m *RunMetadata) GetCostGraph() *CostGraphDef {
	if m != nil {
		return m.CostGraph
	}
	return nil
}

func init() {
	proto.RegisterType((*GPUOptions)(nil), "tensorflow.GPUOptions")
	proto.RegisterType((*OptimizerOptions)(nil), "tensorflow.OptimizerOptions")
	proto.RegisterType((*GraphOptions)(nil), "tensorflow.GraphOptions")
	proto.RegisterType((*ThreadPoolOptionProto)(nil), "tensorflow.ThreadPoolOptionProto")
	proto.RegisterType((*ConfigProto)(nil), "tensorflow.ConfigProto")
	proto.RegisterType((*DebugTensorWatch)(nil), "tensorflow.DebugTensorWatch")
	proto.RegisterType((*RunOptions)(nil), "tensorflow.RunOptions")
	proto.RegisterType((*RunMetadata)(nil), "tensorflow.RunMetadata")
	proto.RegisterEnum("tensorflow.OptimizerOptions_Level", OptimizerOptions_Level_name, OptimizerOptions_Level_value)
	proto.RegisterEnum("tensorflow.RunOptions_TraceLevel", RunOptions_TraceLevel_name, RunOptions_TraceLevel_value)
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x56, 0xdd, 0x8e, 0x1b, 0x35,
	0x14, 0xee, 0x24, 0xdd, 0x25, 0x39, 0x49, 0xb7, 0xa9, 0x49, 0xdb, 0xa1, 0x2d, 0x6a, 0x1a, 0x54,
	0x29, 0x20, 0xc8, 0x96, 0xa5, 0xa5, 0x15, 0x12, 0x54, 0xdd, 0x5f, 0x16, 0x76, 0xbb, 0x91, 0x93,
	0xaa, 0x97, 0xd6, 0x64, 0xc6, 0xc9, 0x8e, 0xea, 0xb1, 0x2d, 0xdb, 0xb3, 0xcb, 0x22, 0x1e, 0x81,
	0x37, 0xe0, 0x9e, 0x57, 0xe0, 0x2d, 0xb8, 0xe2, 0x61, 0xb8, 0x03, 0xd9, 0x9e, 0xc9, 0x64, 0xc3,
	0xaa, 0xe4, 0xca, 0xf3, 0x7d, 0xdf, 0x39, 0x73, 0x7c, 0xfc, 0xf9, 0x64, 0xe0, 0xb1, 0xa1, 0x5c,
	0x0b, 0x35, 0x63, 0xe2, 0x7c, 0x33, 0x16, 0x8a, 0x6e, 0x4a, 0x25, 0x8c, 0x98, 0xe6, 0xb3, 0xcd,
	0x58, 0xf0, 0x59, 0x3a, 0x1f, 0xba, 0x67, 0x04, 0x95, 0xec, 0xde, 0x67, 0xab, 0x21, 0x33, 0x15,
	0x65, 0xf4, 0x5c, 0xa8, 0x77, 0x9b, 0xb1, 0xd0, 0x86, 0xcc, 0x55, 0x24, 0x4f, 0x7d, 0xdc, 0xfb,
	0xb4, 0xda, 0x50, 0x49, 0xb4, 0x89, 0x8c, 0xf6, 0xda, 0xfe, 0x5f, 0x01, 0xc0, 0xc1, 0xe8, 0xcd,
	0x89, 0x34, 0xa9, 0xe0, 0x1a, 0xed, 0xc2, 0x43, 0x49, 0x15, 0x91, 0x4a, 0xc4, 0x54, 0x6b, 0x32,
	0x97, 0x39, 0xc9, 0x68, 0x26, 0xd4, 0x05, 0x99, 0xa9, 0x28, 0xb6, 0x9a, 0x30, 0xe8, 0x05, 0x83,
	0x00, 0xdf, 0x97, 0x54, 0x8d, 0xbc, 0xea, 0x40, 0xe6, 0xc7, 0x4e, 0xb3, 0x5f, 0x48, 0xd0, 0x63,
	0xd8, 0x88, 0x18, 0x13, 0x71, 0x64, 0x84, 0x22, 0xe6, 0x42, 0xd2, 0xb0, 0xd6, 0x0b, 0x06, 0x4d,
	0x7c, 0x63, 0x81, 0x4e, 0x2e, 0x24, 0x45, 0x5f, 0xc3, 0xdd, 0x84, 0xce, 0xa8, 0x52, 0x34, 0x21,
	0x09, 0x65, 0xd4, 0xc6, 0x92, 0xe9, 0x85, 0xa1, 0x3a, 0xac, 0xf7, 0x82, 0x41, 0x1d, 0xdf, 0x2e,
	0xe9, 0xdd, 0x82, 0xdd, 0xb6, 0x24, 0x7a, 0x04, 0x6d, 0x9b, 0xe8, 0x9c, 0xcc, 0x95, 0x38, 0x37,
	0xa7, 0xe1, 0xf5, 0x5e, 0x30, 0x68, 0xe0, 0x96, 0xc3, 0x0e, 0x1c, 0xd4, 0xff, 0xbd, 0x06, 0x1d,
	0xbb, 0xa7, 0x2c, 0xfd, 0x99, 0xaa, 0x72, 0x73, 0xc7, 0xf0, 0x49, 0x22, 0x48, 0x2c, 0xb2, 0x4c,
	0x70, 0xa2, 0xf3, 0x29, 0xfd, 0x49, 0x2a, 0xaa, 0xb5, 0x7d, 0x2b, 0x65, 0x69, 0x96, 0xf2, 0x68,
	0xb1, 0xc1, 0x06, 0xee, 0x25, 0x62, 0xc7, 0x29, 0xc7, 0xcb, 0xc2, 0xbd, 0x4a, 0x87, 0x86, 0xf0,
	0xa1, 0x4b, 0xc7, 0xb5, 0x89, 0xb8, 0x21, 0x33, 0xc1, 0x92, 0x94, 0xcf, 0xdd, 0x56, 0x1b, 0xf8,
	0x96, 0x0d, 0xf7, 0xcc, 0xbe, 0x27, 0xd0, 0x13, 0xe8, 0x26, 0x82, 0xcc, 0x72, 0xee, 0x9a, 0x44,
	0x52, 0xce, 0x52, 0x6e, 0x03, 0x7c, 0xf9, 0x28, 0x11, 0xfb, 0x05, 0x75, 0x58, 0x30, 0xe8, 0x25,
	0x34, 0x85, 0x34, 0x84, 0xd1, 0x33, 0xca, 0x5c, 0x4b, 0x36, 0xb6, 0xfa, 0xc3, 0xea, 0x70, 0x87,
	0xab, 0x3b, 0x1c, 0x1e, 0x59, 0x25, 0x6e, 0x08, 0x69, 0xdc, 0xaa, 0xdf, 0x83, 0x35, 0xb7, 0x40,
	0xeb, 0x50, 0x3b, 0xfa, 0xb2, 0x73, 0x0d, 0xdd, 0x84, 0xda, 0xd1, 0x93, 0xce, 0x3f, 0xe5, 0x2f,
	0xe8, 0xff, 0x51, 0x83, 0xf6, 0x81, 0xf5, 0x4e, 0xd9, 0xa4, 0xa7, 0x70, 0x87, 0xf2, 0x68, 0xca,
	0x28, 0x51, 0x34, 0x3e, 0x23, 0x3a, 0x3e, 0xa5, 0x49, 0xce, 0xaa, 0x8d, 0x75, 0x3d, 0x8b, 0x69,
	0x7c, 0x36, 0x5e, 0x70, 0xe8, 0x10, 0x6e, 0x89, 0xb2, 0x18, 0x22, 0x7c, 0x2a, 0x57, 0x71, 0x6b,
	0xeb, 0xc1, 0xfb, 0x2a, 0xc6, 0x1d, 0xb1, 0x7a, 0x4a, 0x03, 0xe8, 0x4c, 0xf3, 0x94, 0x25, 0xc4,
	0xf9, 0x3a, 0x13, 0x09, 0x65, 0xae, 0x45, 0x75, 0xbc, 0xe1, 0xf0, 0x1d, 0xa1, 0xcd, 0xb1, 0x45,
	0xad, 0x0f, 0x52, 0x3e, 0xa3, 0x8a, 0xe8, 0xd3, 0x48, 0x52, 0x1d, 0xae, 0x79, 0x1f, 0x38, 0x6c,
	0xec, 0x20, 0xf4, 0x39, 0x20, 0xc9, 0xa2, 0x98, 0x12, 0xa9, 0x72, 0x4e, 0x13, 0x7f, 0x4d, 0xc2,
	0x75, 0x27, 0xec, 0x38, 0x66, 0xe4, 0x08, 0xd7, 0x82, 0x1f, 0xae, 0x37, 0x82, 0x4e, 0x0d, 0x3f,
	0xd6, 0xef, 0x52, 0xf9, 0xbf, 0x36, 0xe9, 0xbf, 0x80, 0xdb, 0x93, 0x53, 0x45, 0xa3, 0x64, 0x24,
	0x04, 0xf3, 0xc5, 0x8f, 0xdc, 0xb5, 0x7d, 0x08, 0x2d, 0x9e, 0x67, 0xc4, 0x38, 0x52, 0x3b, 0x3b,
	0xad, 0x61, 0xe0, 0x79, 0xe6, 0xe5, 0xba, 0xff, 0xdb, 0x3a, 0xb4, 0x76, 0xdc, 0x45, 0xf7, 0x01,
	0x3f, 0x42, 0x3b, 0xa1, 0x67, 0x69, 0x4c, 0x49, 0x2c, 0x72, 0x6e, 0xc2, 0xa0, 0x57, 0x1f, 0xb4,
	0xb6, 0x06, 0xcb, 0x7d, 0x5b, 0x92, 0x0f, 0x77, 0x9d, 0x76, 0xc7, 0x4a, 0xf7, 0xb8, 0x51, 0x17,
	0xb8, 0x95, 0x54, 0x08, 0x7a, 0x09, 0x0f, 0x52, 0x6e, 0x54, 0x44, 0x84, 0x24, 0x32, 0x52, 0x11,
	0x63, 0x94, 0xa5, 0xba, 0x2a, 0xa7, 0xe6, 0xca, 0xf9, 0xc8, 0x69, 0x4e, 0xe4, 0xa8, 0x52, 0x14,
	0xd5, 0x15, 0x09, 0xdc, 0x31, 0x5e, 0x99, 0x60, 0x6d, 0x91, 0xc0, 0x9e, 0xd9, 0x15, 0x09, 0x9e,
	0xc1, 0xdd, 0x5c, 0x53, 0x62, 0xe7, 0x88, 0x2e, 0xfa, 0x56, 0xc6, 0x36, 0xbd, 0x85, 0x72, 0x4d,
	0x47, 0x54, 0x8d, 0x3d, 0x59, 0x86, 0x45, 0xf0, 0xa0, 0x94, 0x2f, 0xde, 0xef, 0xe3, 0x88, 0x14,
	0x82, 0x85, 0x6d, 0xd7, 0x95, 0x47, 0xcb, 0x5d, 0xb9, 0xb2, 0xff, 0x38, 0x2c, 0xd2, 0x1c, 0xfa,
	0x0a, 0x2b, 0x11, 0xfa, 0x14, 0xfc, 0x99, 0x67, 0x94, 0x1b, 0x5b, 0x5f, 0x2a, 0x12, 0x67, 0xd2,
	0x35, 0x7c, 0x73, 0x81, 0x8f, 0x1c, 0x6c, 0x47, 0x58, 0x71, 0x26, 0xb3, 0x94, 0x19, 0xaa, 0x74,
	0x78, 0xbd, 0x57, 0xb7, 0x23, 0xcc, 0xa3, 0xfb, 0x1e, 0x44, 0xcf, 0xa1, 0x65, 0x67, 0x64, 0xe9,
	0xf8, 0x75, 0xe7, 0xf8, 0x3b, 0xcb, 0x35, 0x56, 0xc3, 0x15, 0xc3, 0x5c, 0xe6, 0xa5, 0xcb, 0x9f,
	0x40, 0xd7, 0xcf, 0x30, 0x2d, 0x66, 0x86, 0x2c, 0xde, 0x1e, 0x7e, 0xe0, 0x87, 0x81, 0xe3, 0xc6,
	0x62, 0x66, 0x46, 0x25, 0x63, 0x23, 0x98, 0x98, 0x93, 0xa2, 0xaa, 0x2a, 0xa2, 0xe1, 0x23, 0x98,
	0x98, 0x7b, 0x63, 0x54, 0x11, 0xdf, 0xc2, 0x0d, 0xe7, 0xf7, 0x45, 0x79, 0xe0, 0xca, 0x0b, 0x2f,
	0x95, 0xb7, 0x74, 0xf7, 0x71, 0x7b, 0xbe, 0x3c, 0x09, 0x9e, 0xc1, 0x5d, 0x21, 0xa9, 0x72, 0x6e,
	0x27, 0x26, 0xcd, 0xa8, 0xc8, 0x0d, 0x49, 0x39, 0xc9, 0x74, 0xd8, 0x72, 0xf7, 0xb1, 0xbb, 0xa0,
	0x27, 0x9e, 0x3d, 0xe4, 0xc7, 0xfa, 0xde, 0x77, 0xd0, 0x59, 0x75, 0x28, 0xea, 0x40, 0xfd, 0x1d,
	0xbd, 0x70, 0x57, 0xa1, 0x89, 0xed, 0x12, 0x75, 0x61, 0xed, 0x2c, 0x62, 0x39, 0x2d, 0xfc, 0xe8,
	0x1f, 0xbe, 0xa9, 0xbd, 0x08, 0xfa, 0xbf, 0x06, 0x36, 0xc1, 0x34, 0x9f, 0x4f, 0x5c, 0x95, 0x6f,
	0x23, 0x13, 0x9f, 0xa2, 0xfb, 0xd0, 0xe4, 0x22, 0xa1, 0x84, 0x47, 0x19, 0x2d, 0xd2, 0x34, 0x2c,
	0xf0, 0x3a, 0xca, 0xa8, 0xbd, 0x70, 0x22, 0x37, 0x32, 0x37, 0x44, 0x33, 0x61, 0x8a, 0x8c, 0xe0,
	0xa1, 0x31, 0x13, 0xc6, 0x46, 0x27, 0x36, 0x23, 0x11, 0xd2, 0x4e, 0x25, 0x7b, 0x8e, 0x0d, 0x07,
	0x9c, 0x48, 0x8d, 0x3e, 0x06, 0xf0, 0x64, 0xae, 0x58, 0x79, 0xca, 0x5e, 0xfe, 0x46, 0x31, 0xdd,
	0xff, 0xb3, 0x06, 0x80, 0x73, 0x5e, 0x36, 0x65, 0x1b, 0x5a, 0x46, 0xd9, 0x81, 0xe2, 0x87, 0x72,
	0xe0, 0x86, 0xf2, 0x25, 0x53, 0x56, 0xe2, 0xe1, 0xc4, 0x2a, 0xfd, 0x4c, 0x06, 0xb3, 0x58, 0xa3,
	0x3e, 0xdc, 0xb8, 0xdc, 0xce, 0x9a, 0x6b, 0x67, 0xcb, 0x54, 0x5d, 0x44, 0x9b, 0xd0, 0xbd, 0xf2,
	0x16, 0x78, 0xbb, 0xde, 0x4a, 0xff, 0xe3, 0xed, 0xb1, 0xfd, 0x33, 0xb5, 0xdb, 0xf0, 0xa5, 0x90,
	0x73, 0xdb, 0x37, 0x7b, 0xf2, 0x7e, 0x4f, 0x2b, 0x73, 0x78, 0xb5, 0xc1, 0xb8, 0x9b, 0xac, 0x20,
	0x27, 0xd2, 0xe8, 0x3e, 0x06, 0xa8, 0xf6, 0x80, 0xda, 0xd0, 0x78, 0x7d, 0x42, 0x26, 0xf8, 0xd5,
	0xce, 0x5e, 0xe7, 0x1a, 0x42, 0xb0, 0x31, 0x3e, 0xd9, 0x9f, 0xbc, 0x7d, 0x85, 0xf7, 0x0a, 0x2c,
	0xb0, 0xd8, 0xf7, 0xaf, 0xf0, 0xee, 0x12, 0x56, 0x43, 0x1b, 0x00, 0xfb, 0x6f, 0x8e, 0x8e, 0x8a,
	0xe7, 0x7a, 0xff, 0x17, 0x68, 0xe1, 0x9c, 0x1f, 0x53, 0x13, 0x25, 0x91, 0x89, 0xd0, 0x53, 0x80,
	0xea, 0xa3, 0xc4, 0xf5, 0xb3, 0xb5, 0x75, 0x7b, 0xb9, 0xd4, 0xb1, 0xa1, 0x72, 0x6c, 0x49, 0xdc,
	0xd4, 0xe5, 0x12, 0x3d, 0x07, 0xa8, 0x3e, 0x7b, 0x5c, 0xff, 0x56, 0x7c, 0x6d, 0xff, 0x25, 0x9c,
	0xb7, 0x77, 0xe9, 0x0c, 0x37, 0xe3, 0xf2, 0x69, 0xfb, 0x0b, 0x08, 0x85, 0x9a, 0x2f, 0x2b, 0x17,
	0x1f, 0x47, 0xdb, 0xed, 0xa5, 0x29, 0xab, 0x47, 0xc1, 0xdf, 0x41, 0x30, 0x5d, 0x77, 0x5f, 0x49,
	0x5f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x17, 0x62, 0xb0, 0xb2, 0x09, 0x00, 0x00,
}
