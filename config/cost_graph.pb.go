// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/cost_graph.proto
// DO NOT EDIT!

package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CostGraphDef struct {
	Node []*CostGraphDef_Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
}

func (m *CostGraphDef) Reset()                    { *m = CostGraphDef{} }
func (m *CostGraphDef) String() string            { return proto.CompactTextString(m) }
func (*CostGraphDef) ProtoMessage()               {}
func (*CostGraphDef) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CostGraphDef) GetNode() []*CostGraphDef_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CostGraphDef_Node struct {
	// The name of the node.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The device of the node.
	Device string `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	// The id of the node.
	Id         int32                           `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	InputInfo  []*CostGraphDef_Node_InputInfo  `protobuf:"bytes,4,rep,name=input_info,json=inputInfo" json:"input_info,omitempty"`
	OutputInfo []*CostGraphDef_Node_OutputInfo `protobuf:"bytes,5,rep,name=output_info,json=outputInfo" json:"output_info,omitempty"`
	// Temporary memory used by this node.
	TemporaryMemorySize int64 `protobuf:"varint,6,opt,name=temporary_memory_size,json=temporaryMemorySize" json:"temporary_memory_size,omitempty"`
	// If true, the output is permanent: it can't be discarded, because this
	// node is part of the "final output". Nodes may depend on final nodes.
	IsFinal bool `protobuf:"varint,7,opt,name=is_final,json=isFinal" json:"is_final,omitempty"`
	// Ids of the control inputs for this node.
	ControlInput []int32 `protobuf:"varint,8,rep,packed,name=control_input,json=controlInput" json:"control_input,omitempty"`
}

func (m *CostGraphDef_Node) Reset()                    { *m = CostGraphDef_Node{} }
func (m *CostGraphDef_Node) String() string            { return proto.CompactTextString(m) }
func (*CostGraphDef_Node) ProtoMessage()               {}
func (*CostGraphDef_Node) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *CostGraphDef_Node) GetInputInfo() []*CostGraphDef_Node_InputInfo {
	if m != nil {
		return m.InputInfo
	}
	return nil
}

func (m *CostGraphDef_Node) GetOutputInfo() []*CostGraphDef_Node_OutputInfo {
	if m != nil {
		return m.OutputInfo
	}
	return nil
}

// Inputs of this node. They must be executed before this node can be
// executed. An input is a particular output of another node, specified
// by the node id and the output index.
type CostGraphDef_Node_InputInfo struct {
	PrecedingNode int32 `protobuf:"varint,1,opt,name=preceding_node,json=precedingNode" json:"preceding_node,omitempty"`
	PrecedingPort int32 `protobuf:"varint,2,opt,name=preceding_port,json=precedingPort" json:"preceding_port,omitempty"`
}

func (m *CostGraphDef_Node_InputInfo) Reset()         { *m = CostGraphDef_Node_InputInfo{} }
func (m *CostGraphDef_Node_InputInfo) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef_Node_InputInfo) ProtoMessage()    {}
func (*CostGraphDef_Node_InputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0, 0}
}

// Outputs of this node.
type CostGraphDef_Node_OutputInfo struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	// If >= 0, the output is an alias of an input. Note that an alias input
	// may itself be an alias. The algorithm will therefore need to follow
	// those pointers.
	AliasInputPort int64 `protobuf:"varint,2,opt,name=alias_input_port,json=aliasInputPort" json:"alias_input_port,omitempty"`
}

func (m *CostGraphDef_Node_OutputInfo) Reset()         { *m = CostGraphDef_Node_OutputInfo{} }
func (m *CostGraphDef_Node_OutputInfo) String() string { return proto.CompactTextString(m) }
func (*CostGraphDef_Node_OutputInfo) ProtoMessage()    {}
func (*CostGraphDef_Node_OutputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0, 1}
}

func init() {
	proto.RegisterType((*CostGraphDef)(nil), "tensorflow.CostGraphDef")
	proto.RegisterType((*CostGraphDef_Node)(nil), "tensorflow.CostGraphDef.Node")
	proto.RegisterType((*CostGraphDef_Node_InputInfo)(nil), "tensorflow.CostGraphDef.Node.InputInfo")
	proto.RegisterType((*CostGraphDef_Node_OutputInfo)(nil), "tensorflow.CostGraphDef.Node.OutputInfo")
}

func init() { proto.RegisterFile("tensorflow/core/framework/cost_graph.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x95, 0x37, 0xd9, 0xed, 0xee, 0xb4, 0x5d, 0x90, 0x11, 0xc8, 0xac, 0x84, 0x14, 0x81, 0x10,
	0x16, 0x87, 0x2c, 0x94, 0x7f, 0x50, 0x50, 0xd1, 0x22, 0x01, 0x2b, 0x73, 0xe2, 0x14, 0x85, 0xc4,
	0x59, 0x2c, 0x12, 0x4f, 0x64, 0xbb, 0x54, 0xed, 0xef, 0xe2, 0x87, 0x71, 0xe4, 0x88, 0x3c, 0x2c,
	0xc9, 0xf6, 0xd2, 0xdb, 0x7c, 0x3c, 0x3f, 0xcf, 0x7b, 0x33, 0xf0, 0x32, 0x68, 0xeb, 0xd1, 0x35,
	0x2d, 0x5e, 0xad, 0x2b, 0x74, 0x7a, 0xdd, 0xb8, 0xb2, 0xd3, 0x57, 0xe8, 0x7e, 0xac, 0x2b, 0xf4,
	0xa1, 0xd8, 0xb9, 0xb2, 0xff, 0x9e, 0xf7, 0x0e, 0x03, 0x72, 0x18, 0xb1, 0x4f, 0x7f, 0xa5, 0x70,
	0xf2, 0x16, 0x7d, 0x78, 0x1f, 0xfb, 0xef, 0x74, 0xc3, 0x5f, 0x43, 0x6a, 0xb1, 0xd6, 0x82, 0x65,
	0x89, 0x3c, 0x3e, 0x7b, 0x92, 0x8f, 0xd8, 0xfc, 0x10, 0x97, 0x7f, 0xc2, 0x5a, 0x2b, 0x82, 0xae,
	0x7e, 0x27, 0x90, 0xc6, 0x94, 0x73, 0x48, 0x6d, 0xd9, 0xc5, 0xb7, 0x4c, 0x2e, 0x14, 0xc5, 0xfc,
	0x11, 0xcc, 0x6a, 0xfd, 0xd3, 0x54, 0x5a, 0x4c, 0xa8, 0xba, 0xcf, 0xf8, 0x12, 0x26, 0xa6, 0x16,
	0x49, 0xc6, 0xe4, 0x54, 0x4d, 0x4c, 0xcd, 0x2f, 0x00, 0x8c, 0xed, 0x2f, 0x43, 0x61, 0x6c, 0x83,
	0x22, 0xa5, 0xdf, 0x5f, 0xdc, 0xf9, 0x7b, 0xbe, 0x89, 0xf8, 0x8d, 0x6d, 0x50, 0x2d, 0xcc, 0xff,
	0x90, 0x6f, 0xe0, 0x18, 0x2f, 0xc3, 0x40, 0x34, 0x25, 0x22, 0x79, 0x37, 0xd1, 0x67, 0x7a, 0x40,
	0x4c, 0x80, 0x43, 0xcc, 0xcf, 0xe0, 0x61, 0xd0, 0x5d, 0x8f, 0xae, 0x74, 0xd7, 0x45, 0xa7, 0x3b,
	0x74, 0xd7, 0x85, 0x37, 0x37, 0x5a, 0xcc, 0x32, 0x26, 0x13, 0xf5, 0x60, 0x68, 0x7e, 0xa4, 0xde,
	0x17, 0x73, 0xa3, 0xf9, 0x63, 0x98, 0x1b, 0x5f, 0x34, 0xc6, 0x96, 0xad, 0x38, 0xca, 0x98, 0x9c,
	0xab, 0x23, 0xe3, 0x2f, 0x62, 0xca, 0x9f, 0xc1, 0x69, 0x85, 0x36, 0x38, 0x6c, 0x0b, 0x1a, 0x57,
	0xcc, 0xb3, 0x44, 0x4e, 0xd5, 0xc9, 0xbe, 0x48, 0x6a, 0x56, 0x5f, 0x61, 0x31, 0xc8, 0xe2, 0xcf,
	0x61, 0xd9, 0x3b, 0x5d, 0xe9, 0xda, 0xd8, 0x5d, 0xb1, 0xdf, 0x4a, 0xf4, 0xeb, 0x74, 0xa8, 0x92,
	0xed, 0xb7, 0x60, 0x3d, 0xba, 0x40, 0x56, 0x1f, 0xc2, 0xb6, 0xe8, 0xc2, 0xea, 0x03, 0xc0, 0x28,
	0x34, 0xee, 0x8a, 0xb4, 0x30, 0xd2, 0x42, 0x31, 0x97, 0x70, 0xbf, 0x6c, 0x4d, 0xe9, 0xff, 0xcd,
	0x37, 0x52, 0x25, 0x6a, 0x49, 0x75, 0x9a, 0x2c, 0x72, 0x9d, 0xbf, 0x02, 0x81, 0x6e, 0x77, 0xe8,
	0xea, 0x70, 0x6f, 0xe7, 0xf7, 0x06, 0x83, 0xb7, 0xf1, 0xdc, 0xfc, 0x96, 0xfd, 0x61, 0xec, 0xdb,
	0x8c, 0x6e, 0xef, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xd6, 0xb9, 0xf1, 0xa9, 0x02,
	0x00, 0x00,
}
